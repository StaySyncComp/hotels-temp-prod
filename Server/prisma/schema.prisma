generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          Int     @id @default(autoincrement())
  username    String  @unique
  email       String  @unique
  name        String
  password    String
  logo        String?
  phoneNumber String?

  expoPushToken         String[]
  userType              UserType
  organizationRoles     OrganizationRole[]
  Organization          Organization[]
  createdCalls          Call[]              @relation("CreatedCalls")
  assignedCalls         Call[]              @relation("AssignedCalls")
  closedCalls           Call[]              @relation("ClosedCalls")
  recurringCreatedCalls RecurringCall[]     @relation("UserRecurringCreatedCalls")
  CallMessage           CallMessage[]
  assignedToUser        CallStatusHistory[] @relation("AssignedToUser")
  changedByUser         CallStatusHistory[] @relation("ChangedByUser")
  CallStatusHistory     CallStatusHistory[]

  @@map("users")
}

enum UserType {
  EMPLOYER
  EMPLOYEE
}

model Organization {
  id                Int                @id @default(autoincrement())
  ownerId           Int
  name              String
  customStyles      Json // JSON field for custom styles
  logo              String
  years             String[]
  departments       Department[]
  locations         Location[]
  organizationRoles OrganizationRole[]
  owner             User               @relation(fields: [ownerId], references: [id])
  CallCategory      CallCategory[]
  Role              Role[]
  recurringCalls    RecurringCall[]
  Area              Area[]
  CallMessage       CallMessage[]
  aiSettings        AiSettings?
  aiSettingsId      Int?

  @@map("organizations")
}

model Department {
  id               Int                @id @default(autoincrement())
  name             Json
  logo             String?
  organizationId   Int
  organization     Organization       @relation(fields: [organizationId], references: [id])
  OrganizationRole OrganizationRole[]
  Call             Call[]
  CallCategory     CallCategory[]
  recurringCalls   RecurringCall[]

  @@map("departments")
}

model Location {
  id             Int             @id @default(autoincrement())
  name           Json
  roomNumber     Int?
  color          String?
  organizationId Int
  areaId         Int
  area           Area            @relation(fields: [areaId], references: [id])
  organization   Organization    @relation(fields: [organizationId], references: [id])
  Call           Call[]
  RecurringCall  RecurringCall[]

  @@map("locations")
}

model Area {
  id             Int    @id @default(autoincrement())
  name           Json
  color          String
  organizationId Int

  organization Organization @relation(fields: [organizationId], references: [id])
  Location     Location[]

  @@map("areas")
}

model Role {
  id                Int                @id @default(autoincrement())
  name              Json
  organizationId    Int
  organization      Organization       @relation(fields: [organizationId], references: [id])
  permissions       Permission[] // Permissions attached to this role
  organizationRoles OrganizationRole[] // Users assigned this role within an organization

  @@unique([organizationId, name])
  @@map("roles")
}

model OrganizationRole {
  id             Int  @id @default(autoincrement())
  userId         Int
  organizationId Int
  departmentId   Int?
  roleId         Int // References the Role model

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
  department   Department?  @relation(fields: [departmentId], references: [id])
  role         Role         @relation(fields: [roleId], references: [id])

  // Ensures a user doesn't have duplicate roles in the same organization/department
  @@unique([userId, organizationId, departmentId])
  @@map("organizationRoles")
}

enum CallStatus {
  OPENED
  IN_PROGRESS
  COMPLETED
  FAILED
  ON_HOLD
}

model CallCategory {
  id             Int             @id @default(autoincrement())
  name           Json
  departmentId   Int
  organizationId Int
  logo           String
  expectedTime   Int // Expected time in minutes to complete this type of call
  organization   Organization    @relation(fields: [organizationId], references: [id])
  department     Department      @relation(fields: [departmentId], references: [id])
  calls          Call[]
  recurringCalls RecurringCall[]

  @@map("callCategories")
}

model Call {
  id              Int           @id @default(autoincrement())
  description     String?
  locationId      Int?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  closedAt        DateTime?
  callCategoryId  Int?
  createdById     Int
  assignedToId    Int?
  closedById      Int?
  organizationId  Int
  recurringCallId Int?
  status          CallStatus
  departmentId    Int?
  CallMessage     CallMessage[]

  createdBy         User                @relation("CreatedCalls", fields: [createdById], references: [id])
  assignedTo        User?               @relation("AssignedCalls", fields: [assignedToId], references: [id])
  closedBy          User?               @relation("ClosedCalls", fields: [closedById], references: [id])
  callCategory      CallCategory?       @relation(fields: [callCategoryId], references: [id])
  recurringCall     RecurringCall?      @relation("RecurringCall_Calls", fields: [recurringCallId], references: [id])
  location          Location?           @relation(fields: [locationId], references: [id])
  Department        Department?         @relation(fields: [departmentId], references: [id])
  CallStatusHistory CallStatusHistory[]
}

model Permission {
  id     Int  @id @default(autoincrement())
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  resource Resource // e.g., "users", "calls", etc.
  action   Action // e.g., "view", "update", etc.
  scope    ScopeLevel // e.g., "any", "own", "none"
}

enum RecurringFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum Action {
  view
  update
  delete
  create
}

enum Resource {
  users
  calls
  callCategories
  site
  roles
  reports
  departments
  app
}

enum ScopeLevel {
  any
  own
  none
}

model RecurringCall {
  id             Int                @id @default(autoincrement())
  title          String
  description    String?
  location       Location           @relation(fields: [locationId], references: [id])
  departmentId   Int?
  callCategoryId Int?
  createdById    Int
  organizationId Int
  startDate      DateTime
  endDate        DateTime?
  frequency      RecurringFrequency
  interval       Int                @default(1)
  daysOfWeek     Int[]
  times          String[]
  exceptions     DateTime[]         @default([])
  baseCallId     Int?
  createdCalls   Call[]             @relation("RecurringCall_Calls")

  createdBy    User          @relation("UserRecurringCreatedCalls", fields: [createdById], references: [id])
  department   Department?   @relation(fields: [departmentId], references: [id])
  callCategory CallCategory? @relation(fields: [callCategoryId], references: [id])
  organization Organization  @relation(fields: [organizationId], references: [id])
  locationId   Int

  @@map("recurringCalls")
}

model CallMessage {
  id             Int      @id @default(autoincrement())
  callId         Int
  organizationId Int
  userId         Int
  content        String
  createdAt      DateTime @default(now())

  call         Call         @relation(fields: [callId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
}

model AiSettings {
  id             Int          @id @default(autoincrement())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int          @unique

  fileUrls    String[]
  contextText String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@map("aiSettings")
}

model CallStatusHistory {
  id           Int         @id @default(autoincrement())
  callId       Int
  fromStatus   CallStatus?
  toStatus     CallStatus
  changedAt    DateTime    @default(now())
  changedById  Int
  assignedToId Int?
  call         Call        @relation(fields: [callId], references: [id])
  changedBy    User        @relation("ChangedByUser", fields: [changedById], references: [id])
  assignedTo   User?       @relation("AssignedToUser", fields: [assignedToId], references: [id])
  User         User?       @relation(fields: [userId], references: [id])
  userId       Int?
}
